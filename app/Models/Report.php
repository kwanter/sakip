<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Concerns\HasUuids;

/**
 * Report Model
 *
 * Represents generated performance reports for SAKIP compliance.
 * Stores report metadata, file paths, and submission status.
 */
class Report extends Model
{
    use HasFactory, HasUuids, SoftDeletes;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = "reports";

    /**
     * The attributes that are mass assignable.
     *
     * @var array<string>
     */
    protected $fillable = [
        "instansi_id",
        "generated_by",
        "approver_id",
        "template_id",
        "report_type",
        "period",
        "file_path",
        "parameters",
        "status",
        "generated_at",
        "submitted_at",
        "metadata",
        "created_by",
        "updated_by",
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        "instansi_id" => "string",
        "generated_by" => "string",
        "created_by" => "string",
        "updated_by" => "string",
        "parameters" => "array",
        "generated_at" => "datetime",
        "submitted_at" => "datetime",
        "metadata" => "array",
        "created_at" => "datetime",
        "updated_at" => "datetime",
        "deleted_at" => "datetime",
    ];

    /**
     * Get the instansi that owns the report.
     */
    public function instansi()
    {
        return $this->belongsTo(Instansi::class);
    }

    /**
     * Get the user who generated the report.
     */
    public function generator()
    {
        return $this->belongsTo(User::class, "generated_by");
    }

    /**
     * Get the user who created the report.
     */
    public function creator()
    {
        return $this->belongsTo(User::class, "created_by");
    }

    /**
     * Get the user who last updated the report.
     */
    public function updater()
    {
        return $this->belongsTo(User::class, "updated_by");
    }

    /**
     * Get the user who approved the report.
     */
    public function approver()
    {
        return $this->belongsTo(User::class, "approver_id");
    }

    /**
     * Get the template used for this report.
     */
    public function template()
    {
        return $this->belongsTo(ReportTemplate::class, "template_id");
    }

    /**
     * Get the performance indicators associated with this report.
     */
    public function indicators()
    {
        return $this->belongsToMany(
            PerformanceIndicator::class,
            "indicator_report",
            "report_id",
            "indicator_id",
        )->withTimestamps();
    }

    /**
     * Scope to get reports by type.
     */
    public function scopeByType($query, string $type)
    {
        return $query->where("report_type", $type);
    }

    /**
     * Scope to get reports by status.
     */
    public function scopeByStatus($query, string $status)
    {
        return $query->where("status", $status);
    }

    /**
     * Scope to get reports for a specific instansi.
     */
    public function scopeForInstansi($query, int $instansiId)
    {
        return $query->where("instansi_id", $instansiId);
    }

    /**
     * Scope to get reports for a specific period.
     */
    public function scopeForPeriod($query, string $period)
    {
        return $query->where("period", $period);
    }

    /**
     * Scope to get reports generated by a specific user.
     */
    public function scopeGeneratedBy($query, int $userId)
    {
        return $query->where("generated_by", $userId);
    }

    /**
     * Scope to get completed reports.
     */
    public function scopeCompleted($query)
    {
        return $query->where("status", "completed");
    }

    /**
     * Scope to get submitted reports.
     */
    public function scopeSubmitted($query)
    {
        return $query->where("status", "submitted");
    }

    /**
     * Check if the report is completed.
     */
    public function isCompleted()
    {
        return $this->status === "completed";
    }

    /**
     * Check if the report is submitted.
     */
    public function isSubmitted()
    {
        return $this->status === "submitted";
    }

    /**
     * Check if the report is generating.
     */
    public function isGenerating()
    {
        return $this->status === "generating";
    }

    /**
     * Check if the report failed.
     */
    public function isFailed()
    {
        return $this->status === "failed";
    }

    /**
     * Get the report file URL.
     */
    public function getFileUrlAttribute()
    {
        return $this->file_path ? asset("storage/" . $this->file_path) : null;
    }

    /**
     * Get the report file name.
     */
    public function getFileNameAttribute()
    {
        return $this->file_path ? basename($this->file_path) : null;
    }

    /**
     * Get the period in readable format.
     */
    public function getPeriodDisplayAttribute()
    {
        if (in_array($this->report_type, ["monthly", "quarterly"])) {
            return date("F Y", strtotime($this->period . "-01"));
        } elseif ($this->report_type === "annual") {
            return date("Y", strtotime($this->period . "-01-01"));
        }

        return $this->period;
    }

    /**
     * Get the report type in readable format.
     */
    public function getTypeDisplayAttribute()
    {
        $types = [
            "monthly" => "Monthly",
            "quarterly" => "Quarterly",
            "annual" => "Annual",
            "custom" => "Custom",
        ];

        return $types[$this->report_type] ?? ucfirst($this->report_type);
    }

    /**
     * Get the status in readable format.
     */
    public function getStatusDisplayAttribute()
    {
        $statuses = [
            "generating" => "Generating",
            "completed" => "Completed",
            "failed" => "Failed",
            "submitted" => "Submitted",
        ];

        return $statuses[$this->status] ?? ucfirst($this->status);
    }

    /**
     * Mark the report as completed.
     */
    public function markAsCompleted($filePath = null)
    {
        $this->update([
            "status" => "completed",
            "file_path" => $filePath ?? $this->file_path,
            "generated_at" => now(),
        ]);
    }

    /**
     * Mark the report as failed.
     */
    public function markAsFailed()
    {
        $this->update([
            "status" => "failed",
        ]);
    }

    /**
     * Submit the report.
     */
    public function submit()
    {
        $this->update([
            "status" => "submitted",
            "submitted_at" => now(),
        ]);
    }

    /**
     * Delete the report file.
     */
    public function deleteFile()
    {
        if (
            $this->file_path &&
            file_exists(storage_path("app/public/" . $this->file_path))
        ) {
            unlink(storage_path("app/public/" . $this->file_path));
            $this->update(["file_path" => null]);
        }
    }

    /**
     * Boot method to handle file cleanup.
     */
    protected static function boot()
    {
        parent::boot();

        static::deleting(function ($report) {
            if ($report->isForceDeleting()) {
                $report->deleteFile();
            }
        });
    }
}
